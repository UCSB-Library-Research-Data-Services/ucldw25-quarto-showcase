[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A simple Quarto Website… with cats!",
    "section": "",
    "text": "This is a Quarto website."
  },
  {
    "objectID": "index.html#quarto-workflow",
    "href": "index.html#quarto-workflow",
    "title": "A simple Quarto Website… with cats!",
    "section": "Quarto workflow",
    "text": "Quarto workflow\n\n\n\nArt by Allison Horst"
  },
  {
    "objectID": "index.html#structure-of-a-quarto-document",
    "href": "index.html#structure-of-a-quarto-document",
    "title": "A simple Quarto Website… with cats!",
    "section": "Structure of a Quarto document",
    "text": "Structure of a Quarto document\n\n\n\n\n\n\n3 basic components:\n\nMetadata (YAML aka Yet Another Markup Language)\nText for documentation (markdown + other few tricks)\nCode (chunks) with your analysis (R and friends)"
  },
  {
    "objectID": "index.html#structure-of-a-quarto-website",
    "href": "index.html#structure-of-a-quarto-website",
    "title": "A simple Quarto Website… with cats!",
    "section": "Structure of a Quarto website",
    "text": "Structure of a Quarto website\nFor a website, each webpage is going to be its separate quarto document. To create a website, you need one extra YAML file that will stitch all those pages together. Enters: _quarto.yml\n_quarto.yml can be seen as a config file that provides website options, such as style, name, navigation tools and more. Here is its content for this website:\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"demo-website\"\n  navbar:\n    left:\n      - href: quarto_intro.qmd\n        text: \"Introduction\"\n      - href: index.qmd\n        text: \"Quarto website\"\n      - href: quarto_slides.qmd\n        text: \"Slides\"\n      - href: quarto_paper.qmd\n        text: \"Paper\"\n      - href: quarto_interactive.qmd\n        text: \"Getting fancy\"\n\nformat:\n  html:\n    theme:\n      - cosmo\n      - brand\n    css: styles.css\n    toc: true"
  },
  {
    "objectID": "index.html#so-i-can-build-a-website-that-leverages-r-code",
    "href": "index.html#so-i-can-build-a-website-that-leverages-r-code",
    "title": "A simple Quarto Website… with cats!",
    "section": "So I can build a website that leverages R code!?",
    "text": "So I can build a website that leverages R code!?\nYep!! And as with any other R script, it is good practice to start by loading the libraries you are going to need for your analysis / website content.\n\nlibrary(httr2)\nlibrary(knitr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nMmm… this is a lot of information we would like to hide.\n\nTake two\nAdding an execution option: #| warning: false to the code chunk will let us hide the warning messages when rendering the document\n\nlibrary(httr2)\nlibrary(knitr)\nlibrary(tidyverse)\n\nYeah!!!"
  },
  {
    "objectID": "index.html#now-we-can-start-coding",
    "href": "index.html#now-we-can-start-coding",
    "title": "A simple Quarto Website… with cats!",
    "section": "Now we can start coding!",
    "text": "Now we can start coding!\nDid somebody say cat?? Sorry cute cat?!\n\n\nWe are going to use the Cat API to add random cats to our website\n\nreq &lt;- request(\"https://api.thecatapi.com/v1\")\nresp &lt;- req %&gt;%\n  # Then we add on the images path\n  req_url_path_append(\"images/search\") %&gt;%\n  # Add query parameters _width and _quantity\n  req_url_query(`limit` = 1) %&gt;%\n  req_perform() %&gt;%\n  resp_body_json()\n\nknitr::download_image(resp[[1]]$url, path = tempdir())\n\n\n\n\n\n\n\n\n\n\nWe might want to hide the code\nOf course there is an option for that: #| echo: false\n\n\n\n\n\n\n\n\n\n\n\nOr collapse it\nTry #| code-fold: true if you want to get fancy\n\n\nCode\nreq &lt;- request(\"https://api.thecatapi.com/v1\")\nresp &lt;- req %&gt;%\n  # Then we add on the images path\n  req_url_path_append(\"images/search\") %&gt;%\n  # Add query parameters _width and _quantity\n  req_url_query(`limit` = 1) %&gt;%\n  req_perform() %&gt;%\n  resp_body_json()\n\nknitr::download_image(resp[[1]]$url, path = tempdir())"
  },
  {
    "objectID": "index.html#do-it-in-style",
    "href": "index.html#do-it-in-style",
    "title": "A simple Quarto Website… with cats!",
    "section": "Do it in style",
    "text": "Do it in style\n\nThemes\nYou can change the style of your website pretty easily using the 25 pre-defined themes selected from the Bootswatch project.\nLet’s try flatly. We need to update _quarto.yml so the bottom looks like this:\n...\n\nformat:\n  html:\n    theme:\n      - flatly  #cosmo\n      - brand\n    css: styles.css\n    toc: true\n\n\n\n\n\n\nTip\n\n\n\nDon’t forget to save your changes before rendering!!\n\n\n\n\nCustomize even more\n\nCSS\nYou also have other ways to customize further those default themes. For example you can use the Cascading Style Sheets or CSS to add specific rules to specific elements of your website. By default when you create a quarto website project in RStudio, it will create a file named style.css and add it to your styling options in _quarto.yml. This css file is empty by default. Let’s add some content to modify our headers of level 2 to be green and have more space between letters\n/* css styles */\n\nh2 {\n  color: orange;\n  letter-spacing: 5px;\n}\n\n\nSyntactically Awesome Stylesheets (Sass)\nSass extends existing CSS features in a number of exciting ways, but importantly reduces repetition. You can use .scss stylesheet file(s) to define Sass variables to quickly customize your website’s theme. Sass variables are defined in the form $var-name: value;. Then you can use those variables to assign style to elements (that quarto has predefined). For example, let’s make our navigation bar purple:\n/*-- scss:defaults --*/\n\n$purple: #800080;        /* define the variable purple as a color */\n$navbar-bg: $purple;     /* use this variable to change navbar background */\nAnd modify the _quarto.yml as follow:\n...\n\nformat:\n  html:\n    theme:\n      - cosmo  #flatly\n      - styles.scss\n    css: styles.css\n    toc: true"
  },
  {
    "objectID": "index.html#host-it-on-github",
    "href": "index.html#host-it-on-github",
    "title": "A simple Quarto Website… with cats!",
    "section": "Host it on GitHub",
    "text": "Host it on GitHub\nYou can use GitHub pages to host your website for free! Everytime you push new content, your website will update within a few minutes!! Here we opted to save the rendered html files to a docs folder, which is a naming convention that GitHub uses to point to content for GitHub pages.\n\n\n\nhttps://github.com/UCSB-Library-Research-Data-Services/ucldw25-quarto-showcase"
  },
  {
    "objectID": "index.html#next-steps",
    "href": "index.html#next-steps",
    "title": "A simple Quarto Website… with cats!",
    "section": "Next steps",
    "text": "Next steps\n\n\nCreating a Quarto website: https://quarto.org/docs/websites/\nQuarto website video series: https://quarto.org/docs/blog/posts/2024-12-04-websites-workshop/\nSam’s intro tutorial: https://ucsb-meds.github.io/creating-quarto-websites/\nSam’s styling tips: https://ucsb-meds.github.io/customizing-quarto-websites/#/title-slide\nAn introductory tutorial from the LTER team: https://lter.github.io/scicomp/tutorial_quarto-website.html"
  },
  {
    "objectID": "slides/quarto_intro_slides.html#outline",
    "href": "slides/quarto_intro_slides.html#outline",
    "title": "Quarto Showcase",
    "section": "Outline",
    "text": "Outline\n\nBrief introduction to Quarto\nShowcase 4 project types\n\nWebsite\nPresentation\nJournal article\nDynamic code execution\n\nOur goal\n\nShow what’s possible\nShow how (easily) it was put together\n\n\n\nThis is not a tutorial on how to use Quarto.\nWe will have time at the end for Q&A."
  },
  {
    "objectID": "slides/quarto_intro_slides.html#what-is-quarto",
    "href": "slides/quarto_intro_slides.html#what-is-quarto",
    "title": "Quarto Showcase",
    "section": "What is Quarto?",
    "text": "What is Quarto?\n“An open-source scientific and technical publishing system”\n\nFormerly R Markdown by RStudio\nNow Quarto by Posit\n\n(More) agnostic with respect to programming languages\nNot tied to computation at all\n\nWhy are we showing you this today?\n\nSimple, powerful, effective tool\nWe’re fans\n\n\n\nThis quote and the following are from Quarto’s advertising.\nUsed to be very centered around the R programming language.\nThese slides are an example of using Quarto unrelated to programming or computation."
  },
  {
    "objectID": "slides/quarto_intro_slides.html#authoring",
    "href": "slides/quarto_intro_slides.html#authoring",
    "title": "Quarto Showcase",
    "section": "Authoring",
    "text": "Authoring\n“Author using Jupyter notebooks or with plain text markdown in your favorite editor”\n\nNot like Microsoft Word; not a monolothic application\nNot a monolithic file format\nRather, create everything via simple text files\nManage and render from IDEs (Jupyter, RStudio, VS Code) or the command line"
  },
  {
    "objectID": "slides/quarto_intro_slides.html#dynamic-content",
    "href": "slides/quarto_intro_slides.html#dynamic-content",
    "title": "Quarto Showcase",
    "section": "Dynamic content",
    "text": "Dynamic content\n“Create dynamic content with Python, R, Julia, and Observable”\n\nHeritage: computational notebooks\nNow: create publications that have nothing to do with code"
  },
  {
    "objectID": "slides/quarto_intro_slides.html#production",
    "href": "slides/quarto_intro_slides.html#production",
    "title": "Quarto Showcase",
    "section": "Production",
    "text": "Production\n“Publish reproducible, production quality articles, presentations, dashboards, websites, blogs, and books in HTML, PDF, MS Word, ePub, and more”\n\nLots of pre-packaged options that get you going quickly\nLots of pre-built templates and styling that make things look good"
  },
  {
    "objectID": "slides/quarto_intro_slides.html#publication",
    "href": "slides/quarto_intro_slides.html#publication",
    "title": "Quarto Showcase",
    "section": "Publication",
    "text": "Publication\n“Share knowledge and insights organization-wide by publishing to Posit Connect, Confluence, or other publishing systems”\n\nWho cares about those?\nThe real value: integration with GitHub and GitHub Pages\n\nText files work well for collaborating with git\nPublish/host via GitHub Pages with a button click\n\nAll rendering (to HTML, to PDF, etc.) is automated\n\n\nPosit Connect is proprietary."
  },
  {
    "objectID": "slides/quarto_intro_slides.html#features",
    "href": "slides/quarto_intro_slides.html#features",
    "title": "Quarto Showcase",
    "section": "Features",
    "text": "Features\n“Write using Pandoc markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more”\n\nYes, there are lots of features\nMore importantly:\n\nSimple things are simple\nMore complex things are possible\n\nLots of customization hooks\nCopious help via Quarto documentation, web search, Stack Overflow\n\n\nThe more important thing than having features is that you don’t have to use them, but it’s easy to incrementally add them in."
  }
]