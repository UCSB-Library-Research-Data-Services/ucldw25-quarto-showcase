---
title: "Adding interactivity"
execute:
    echo: true
format:
    html:
        code-fold: true
lightbox: true
---

Quarto is a static site generator, but that doesn't mean we can't add interactivity to our website by using JavaScript. 

## Include vanilla JavaScript

We can include JavaScript code in our Quarto document in a very similar way to how we include HTML. We can just write the code in a `<script>` tag, and it will be executed when the page is loaded. We can test this with something simple, like a button that when clicked, changes the color of a circle. To do this, we can just include a code as the following directly in the quarto document body:

```md
<!-- div to display the circle -->
<div id="circle" style="width: 100px; height: 100px; background-color: red; border-radius: 50%;"></div>

<!-- button to trigger the change of the color -->
<button onclick="changeCircleColor()">Change Circle Color</button>

<!-- function to get the circle element, choose a random element from the colors array, and change the background color of the circle html element -->
<script>
    function changeCircleColor() {
        const circle = document.getElementById("circle");
        const colors = ["red", "blue", "green", "yellow", "purple"];
        const randomIndex = Math.floor(Math.random() * colors.length);
        circle.style.backgroundColor = colors[randomIndex];
    }
</script>
```

The code above will works as follows:

<div id="circle" style="width: 100px; height: 100px; background-color: red; border-radius: 50%; margin: 1rem auto;"></div>

<button onclick="changeCircleColor()" style="display: block; margin: 1rem auto;padding: 10px 20px; font-size: 16px;">Change Circle Color</button>

<script>
    function changeCircleColor() {
        const circle = document.getElementById("circle");
        const colors = ["red", "blue", "green", "yellow", "purple"];
        const randomIndex = Math.floor(Math.random() * colors.length);
        circle.style.backgroundColor = colors[randomIndex];
    }
</script>

One downside of this approach is that the code is not visible in the document, but embedded directly in the Quarto document. However, is still a good approach to add interactivity to our document when we don't need to use any external library or show the code in the document.

Another approach is to use Observable JavaScript, which allows us to use JavaScript in a more structured way, while still being able to display the code in the document.

## Observable JavaScript

Quarto allows us to use JavaScript with [Observable JS](https://observablehq.com/@observablehq/observable-javascript). This approach has the advantage of relying almost entirely on vanilla JavaScript, while still being able to display the code in the document. Besides, OJS allow you to use well known libraries like [D3.js](https://d3js.org/), or NPM packages served from the [jsDelivr](https://www.jsdelivr.com/) CDN.


A useful feature that we can crate with the help of OJS is a simple input form that allows us to validate a user's input. For instance, we can create a simple exercise that validates input from the user. Let's start by creating a JavaScript function that validates that an email address is valid.

```{ojs}
//| code-fold: false
/**
 * Validates an email address.
 * @param {string} email - The email address to validate.
 * @returns {string} A message indicating whether the email address is valid or not.
 */
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
    if (email.length === 0) {
        return '<div class="alert alert-warning interactive-message">Email is required</div>';
    }

    if (!emailRegex.test(email)) {
        return `<div class="alert alert-warning interactive-message">Invalid email address: ${email}</div>`;
    }

    return `<div class="alert alert-success interactive-message">The email ${email} is valid</div>`;
}

```

Because we are using OJS, we can call the `validateEmail` function from another cell. For instance, we can create a simple input form that allows users to enter an email address

```{ojs}
//| code-fold: false

viewof emailInput = Inputs.text({
    label: "Enter your email",
    placeholder: "name@example.com",
    value: "",
    attributes: {
        class: "form-control mb-3"
    }
})

```

That cell is not doing anything yet, but we can just call our function `validateEmail` to validate the email from the `emailInput` view.

```{ojs}
//| code-fold: false

placeholder = '<div class="alert alert-info interactive-message">Validation message will be displayed here</div>';

viewof validationButton = Inputs.button(html`<i class="bi bi-chevron-double-right"></i>`,
    {
    label: "Validate Email",
    value: placeholder, 
    reduce: () => validateEmail(emailInput)
});

validationButtonDisplay = html`${validationButton}`;

```


## Taking advantage of the reactive nature of Observable JS

In the previous example, we used an action (clicking the button) to trigger the validation. However, one of the main features of Observable JS is that it's reactive, meaning that it automatically updates (reacts) when dependencies change. For instance, in the following example, we can create a basic form that allows us to retrieve information from a public API by changing the domain, path and parameters.


```{ojs}

viewof methodDetails = Inputs.select(["GET"], {
    label: "HTTP Method",
    attributes: {
        class: "form-select mb-3"
    }
})

viewof domainDetails = Inputs.text({
    label: "Domain",
    placeholder: "collectionapi.metmuseum.org",
    value: "collectionapi.metmuseum.org",
    attributes: {
        class: "form-control mb-3"
    }
})

viewof pathDetails = Inputs.text({
    label: "Path",
    placeholder: "/public/collection/v1/objects/",
    value: "/public/collection/v1/objects/",
    attributes: {
        class: "form-control mb-3"
    }
})

viewof parameterDetails = Inputs.text({
    label: "Parameter",
    placeholder: "Write the object id here",
    value: "570744",
    attributes: {
        class: "form-control mb-3"
    }
})

async function fetchFromApiDetails(method, domain, path, parameter) {
    try {
        const baseUrl = `https://${domain}`;
        const url = `${baseUrl}${path}${parameter}`;
        const response = await fetch(url);
        const status = {
            code: response.status,
            ok: response.ok,
            text: response.statusText
        };
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        return { data, status };
    } catch (error) {
        return { error: error.message };
    }
}

responseDetails = {
    const result = await fetchFromApiDetails(methodDetails, domainDetails, pathDetails, parameterDetails);
    return result;
}

viewof prettyResponseDetailsContainer = {
    let content;
    if (responseDetails.data.Message) {
        content = html`<div class="alert alert-warning m-0">${responseDetails.data.Message}</div>`;
    } else {
        content = html`<pre class="card-body m-0" style="background-color: #f8f9fa; max-height: 400px; overflow-y: auto;">${JSON.stringify(responseDetails.data, null, 2)}</pre>`;
    }

    const badgeClass = responseDetails.status.ok ? "bg-success" : "bg-danger";

    const container = html`<div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span>Response</span>
            <span class="badge ${badgeClass}">${responseDetails.status.code} ${responseDetails.status.text}</span>
        </div>
        ${content}
    </div>`;
    return container;
}
```

And that allows us to retrieve, for instance, the image of the object, by changing the key of the image in the response.

```{ojs}

viewof imagekey = Inputs.text({
    label: "Image Key",
    placeholder: "primaryImageSmall",
    value: "primaryImageSmall",
    attributes: {
        class: "form-control mb-3"
    }
})

viewof primaryImage = {
    const primaryImage = responseDetails.status.ok ? responseDetails.data[imagekey] : "https://placehold.co/600x400";
    if (primaryImage) {
        const img = html`<img src="${primaryImage}" alt="Primary Image">`;
        return img;
    } else {
        return html`<img src="https://placehold.co/600x400" alt="Placeholder">`;
    }

}
```

